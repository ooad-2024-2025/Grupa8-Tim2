@model K_K.Models.Narudzba

@{
    ViewData["Title"] = "Create";
    var korpaStavke = ViewData["KorpaStavke"] as List<K_K.Models.StavkaKorpe>;
    double ukupno = korpaStavke?.Sum(s => s.Cijena) ?? 0;
    double porez = ukupno * 0.17;
    double bezPoreza = ukupno - porez;
    var korpaId = ViewData["KorpaId"];
}

<h1>Kreiranje narudžbe</h1>

<div class="row">
    <div class="col-md-6">
        <div class="card">
            <div class="card-header">
                <h4>📋 Podaci o narudžbi</h4>
            </div>
            <div class="card-body">
                <form asp-action="Create" method="post">
                    <div asp-validation-summary="ModelOnly" class="text-danger"></div>

                    @if (!ViewData.ModelState.IsValid)
                    {
                        <div class="alert alert-danger">
                            <ul>
                                @foreach (var modelError in ViewData.ModelState.Values.SelectMany(v => v.Errors))
                                {
                                    <li>@modelError.ErrorMessage</li>
                                }
                            </ul>
                        </div>
                    }

                    <div class="form-group mb-3">
                        <label asp-for="Korisnik.Ime" class="control-label"></label>
                        <input asp-for="Korisnik.Ime" class="form-control" />
                        <span asp-validation-for="Korisnik.Ime" class="text-danger"></span>
                    </div>

                    <div class="form-group mb-3">
                        <label asp-for="Korisnik.Prezime" class="control-label"></label>
                        <input asp-for="Korisnik.Prezime" class="form-control" />
                        <span asp-validation-for="Korisnik.Prezime" class="text-danger"></span>
                    </div>

                    @* Uklanjamo NacinPlacanja dropdown jer se bira dugmetom *@
                    @* <div class="form-group mb-3">
                        <label asp-for="NacinPlacanja" class="control-label"></label>
                        <select asp-for="NacinPlacanja" id="NacinPlacanja" class="form-control" asp-items="Html.GetEnumSelectList<VrstaPlacanja>()"></select>
                        <span asp-validation-for="NacinPlacanja" class="text-danger"></span>
                    </div> *@

                    <div class="form-group mb-3">
                        <label asp-for="NacinPreuzimanja" class="control-label"></label>
                        <select asp-for="NacinPreuzimanja" class="form-control" asp-items="Html.GetEnumSelectList<VrstaPreuzimanja>()"></select>
                        <span asp-validation-for="NacinPreuzimanja" class="text-danger"></span>
                    </div>

                    <div class="form-group mb-3">
                        <label asp-for="DatumNarudzbe" class="control-label"></label>
                        <input asp-for="DatumNarudzbe" type="text" class="form-control"
                               value="@ViewData["DanasnjiDatum"]" readonly /> @* Postavljamo type="date" za bolji UI *@
                        <span asp-validation-for="DatumNarudzbe" class="text-danger"></span>
                    </div>

                    <div class="form-group mb-3">
                        <label asp-for="AdresaDostave" class="control-label"></label>
                        <input asp-for="AdresaDostave" class="form-control" />
                        <span asp-validation-for="AdresaDostave" class="text-danger"></span>
                    </div>

                    <div class="form-group mt-4">
                        <div class="d-flex justify-content-center gap-3">
                            <button type="submit" name="submitButton" value="gotovina" class="btn btn-lg btn-custom-brown">✅ Plati gotovinom</button>
                            <button type="submit" name="submitButton" value="kartica" class="btn btn-lg btn-custom-brown">💳 Plati karticom</button>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <div class="col-md-6">
        <div class="card">
            <div class="card-header bg-light">
                <h4>🛒 Vaša narudžba</h4>
            </div>
            <div class="card-body">
                @if (korpaStavke != null && korpaStavke.Any())
                {
                    
                    @foreach (var stavka in korpaStavke)
                    {
                        <div class="row align-items-center mb-3 p-3 border rounded" data-stavka-id="@stavka.Id" data-proizvod-id="@stavka.ProizvodId">
                            <div class="col-3">
                                @if (!string.IsNullOrEmpty(stavka.Proizvod?.Slika))
                                {
                                    <img src="@stavka.Proizvod.Slika" alt="@stavka.Proizvod.Naziv"
                                         class="img-fluid rounded-circle" style="width: 60px; height: 60px; object-fit: cover;" />
                                }
                                else
                                {
                                    <div class="bg-light rounded-circle d-flex align-items-center justify-content-center"
                                         style="width: 60px; height: 60px;">
                                        <i class="fas fa-coffee text-muted"></i>
                                    </div>
                                }
                            </div>
                            <div class="col-6">
                                <h6 class="mb-1">@stavka.Proizvod?.Naziv</h6>
                                <small class="text-muted">@stavka.Proizvod?.Opis</small>
                                <div class="d-flex align-items-center mt-2">
                                    <button type="button" class="btn btn-sm btn-outline-secondary me-2 btn-quantity-minus">
                                        -
                                    </button>
                                    <span class="mx-2 fw-bold stavka-kolicina">@stavka.Kolicina</span>
                                    <button type="button" class="btn btn-sm btn-outline-secondary ms-2 btn-quantity-plus">
                                        +
                                    </button>
                                </div>
                            </div>
                            <div class="col-3 text-end">
                                <div class="fw-bold stavka-ukupno">@((stavka.Cijena).ToString("F2")) KM</div>
                                <small class="text-muted">@stavka.Proizvod?.Cijena.ToString("F2") KM svaki</small>
                                <div class="mt-2">
                                    <button type="button" class="btn btn-sm btn-outline-danger btn-remove-item">
                                        <i class="fas fa-trash"></i>
                                    </button>
                                </div>
                            </div>
                        </div>
                    }


                    <hr class="my-4">

                    <div class="row mb-2">
                        <div class="col-8">Bez poreza:</div>
                        <div class="col-4 text-end" id="subtotal">@bezPoreza.ToString("F2") KM</div>
                    </div>
                    <div class="row mb-2">
                        <div class="col-8">PDV (17%):</div>
                        <div class="col-4 text-end" id="pdv">@porez.ToString("F2") KM</div>
                    </div>
                    <hr>
                    <div class="row mb-3">
                        <div class="col-8"><strong>Ukupno:</strong></div>
                        <div class="col-4 text-end"><strong class="fs-5" id="ukupno-sve">@ukupno.ToString("F2") KM</strong></div>
                    </div>

                    <div class="alert alert-info">
                        <small>
                            <i class="fas fa-info-circle me-1"></i>
                            Možete promijeniti količinu ili ukloniti stavke prije finalizacije narudžbe.
                        </small>
                    </div>
                }
                else
                {
                    <div class="text-center py-4">
                        <i class="fas fa-shopping-cart fa-3x text-muted mb-3"></i>
                        <h5 class="text-muted">Korpa je prazna</h5>
                        <p class="text-muted">Dodajte proizvode u korpu prije kreiranja narudžbe.</p>
                        <a href="@Url.Action("Index", "Proizvod")" class="btn btn-primary">
                            <i class="fas fa-plus me-1"></i> Dodaj proizvode
                        </a>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script>
        var korpaId = @(korpaId ?? 0);
        //azuriranje kolicine
        function updateQuantity(stavkaId, change) {
            fetch('/Korpa/UpdateQuantity', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: JSON.stringify({ id: stavkaId, change: change })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    location.reload();
                } else {
                    alert('Greška pri ažuriranju količine: ' + data.message);
                }
            })
            .catch(error => console.error('Error:', error));
        }

        // uklanjanje stavke
        function removeItem(stavkaId) {
            if (confirm('Da li ste sigurni da želite ukloniti ovu stavku?')) {
                fetch('/Korpa/Remove', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify({ id: stavkaId })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        location.reload();
                    } else {
                        alert('Greška pri uklanjanju stavke: ' + data.message);
                    }
                })
                .catch(error => console.error('Error:', error));
            }
        }
        //OVDJE: sklonila updateSumbitButton jer imaju fiksna dugmad, kao u korpi

        //FUNKCIJE OD SINOC:
                  // Loading funkcije
        function showLoading() {
            $('#loading-spinner').removeClass('d-none');
        }

        function hideLoading() {
            $('#loading-spinner').addClass('d-none');
        }

        // Funkcija za azuriranje kolicine stavke
        function updateItemQuantity(stavkaElement, novaKolicina) {
            var proizvodId = stavkaElement.getAttribute('data-proizvod-id');

            if (novaKolicina < 1) {
                removeItem(stavkaElement);
                return;
            }

            if (korpaId === 0) {
                console.error('Korpa ID nije definisan');
                return;
            }

            showLoading();

            $.post('/Korpa/PromijeniKolicinu', {
                korpaId: korpaId,
                proizvodId: proizvodId,
                kolicina: novaKolicina
            })
            .done(function(data) {
                if (data && data.success) {
                    updateLocalDisplay();
                }
            })
            .fail(function() {
                console.error('Greška pri ažuriranju količine.');
                alert('Greška pri ažuriranju količine.');
            })
            .always(function() {
                hideLoading();
            });
        }

        // Funkcija za uklanjanje stavke
        function removeItem(stavkaElement) {
            if (confirm('Da li ste sigurni da želite ukloniti ovu stavku?')) {
                var proizvodId = stavkaElement.getAttribute('data-proizvod-id');

                if (korpaId === 0) {
                    console.error('Korpa ID nije definisan');
                    return;
                }

                showLoading();

                $.post('/Korpa/UkloniStavku', {
                    korpaId: korpaId,
                    proizvodId: proizvodId
                })
                .done(function(data) {
                    if (data && data.success) {
                        stavkaElement.remove();
                        updateLocalDisplay();
                    }
                })
                .fail(function() {
                    console.error('Greška pri uklanjanju stavke.');
                    alert('Greška pri uklanjanju stavke.');
                })
                .always(function() {
                    hideLoading();
                });
            }
        }

        function updateLocalDisplay() {
            if (korpaId === 0) return;

            $.get('/Korpa/GetKorpaInfo', { korpaId: korpaId })
            .done(function(data) {
                if (data && data.success) {
                    var ukupno = data.ukupnaCijena || 0;
                    var porez = ukupno * 0.17;
                    var bezPoreza = ukupno - porez;

                    //azuriranje ukupnih iznosa
                    $('#subtotal').text(bezPoreza.toFixed(2) + ' KM');
                    $('#pdv').text(porez.toFixed(2) + ' KM');
                    $('#ukupno-sve').text(ukupno.toFixed(2) + ' KM');

                    //azuriranje pojedinačnih stavki
                    if (data.stavke && data.stavke.length > 0) {
                        data.stavke.forEach(function(stavka) {
                            var stavkaElement = document.querySelector('[data-proizvod-id="' + stavka.proizvodId + '"]');
                            if (stavkaElement) {
                                stavkaElement.querySelector('.stavka-kolicina').textContent = stavka.kolicina;
                                stavkaElement.querySelector('.stavka-ukupno').textContent = stavka.cijena.toFixed(2) + ' KM';
                            }
                        });
                    }

                    //ako nema stavki, reload stranicu
                    if (!data.stavke || data.stavke.length === 0) {
                        location.reload();
                    }
                }
            })
            .fail(function() {
                console.error('Greška pri dohvatanju informacija o korpi.');
            });
        }

        //event listener za kada se stranica ucitaa
        document.addEventListener("DOMContentLoaded", function () {
            //event delegation za dinamičke elemente
            document.addEventListener('click', function(e) {
                var stavkaElement = e.target.closest('[data-stavka-id]');
                if (!stavkaElement) return;

                if (e.target.classList.contains('btn-quantity-plus')) {
                    var trenutnaKolicina = parseInt(stavkaElement.querySelector('.stavka-kolicina').textContent);
                    updateItemQuantity(stavkaElement, trenutnaKolicina + 1);
                }
                else if (e.target.classList.contains('btn-quantity-minus')) {
                    var trenutnaKolicina = parseInt(stavkaElement.querySelector('.stavka-kolicina').textContent);
                    updateItemQuantity(stavkaElement, trenutnaKolicina - 1);
                }
                else if (e.target.classList.contains('btn-remove-item') || e.target.closest('.btn-remove-item')) {
                    removeItem(stavkaElement);
                }
            });
        });

    </script>
}